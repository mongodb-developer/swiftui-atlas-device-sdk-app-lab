"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[8962],{8976:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>o});var n=t(5893),a=t(1151);const d={},s="Adding and Editing Habits",r={id:"habit-detail-view/habit-detail-view-edit",title:"Adding and Editing Habits",description:"Adding or Editing?",source:"@site/docs/9-habit-detail-view/2-habit-detail-view-edit.mdx",sourceDirName:"9-habit-detail-view",slug:"/habit-detail-view/habit-detail-view-edit",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/habit-detail-view/habit-detail-view-edit",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/9-habit-detail-view/2-habit-detail-view-edit.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create the HabitDetailView",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/habit-detail-view/habit-detail-view"},next:{title:"Using HabitDetailView",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/habit-detail-view/using-habit-detail-view"}},l={},o=[{value:"Adding or Editing?",id:"adding-or-editing",level:2},{value:"Fixing the Preview (again)",id:"fixing-the-preview-again",level:2}];function c(e){const i={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"adding-and-editing-habits",children:"Adding and Editing Habits"}),"\n",(0,n.jsx)(i.h2,{id:"adding-or-editing",children:"Adding or Editing?"}),"\n",(0,n.jsxs)(i.p,{children:["We want to use this view for adding a new Habit or to edit an existing one. If we're adding, the injected ",(0,n.jsx)(i.code,{children:"habit"})," will be blank. If editing, it'll contain data. To distinguish between these two modes we'll use a simple boolean variable ",(0,n.jsx)(i.code,{children:"isAddingNewHabit"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:['If we\'re adding a new Habit, we change the title to "New Habit" and a new "Save" button will add this new Habit to the list of ',(0,n.jsx)(i.code,{children:"habits"})]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-swift",metastring:"title='/UI/HabitDetailView.swift'",children:'struct HabitDetailView: View {\n    @ObservedRealmObject var habit: Habit\n    @ObservedRealmObject var habits: Habits\n    @Binding var isAddingNewHabit: Bool\n\n    var body: some View {\n        VStack {\n            if isAddingNewHabit {\n                Text("New Habit")\n                    .font(.largeTitle)\n            } else {\n                Text(habit.name)\n                    .font(.largeTitle)\n            }\n            \n            List {\n                Section {\n                    TextField("Name", text: $habit.name, prompt: Text("Enter habit name"))\n                    TextField("Description", text: $habit.desc, prompt: Text("Enter habit description"))\n                }\n            }\n\n            if isAddingNewHabit {\n                Button("Save") {\n                    $habits.habits.append(habit)\n                    isAddingNewHabit = false\n                }.padding()\n            }\n        }\n    }\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:["We've deleted the ",(0,n.jsx)(i.code,{children:'.navigationTitle("New Habit")'})," as now we're using the ",(0,n.jsx)(i.code,{children:"largeTitle"})," ",(0,n.jsx)(i.code,{children:"Text"})," to show if we're editing or adding."]}),"\n",(0,n.jsx)(i.h2,{id:"fixing-the-preview-again",children:"Fixing the Preview (again)"}),"\n",(0,n.jsx)(i.p,{children:"As we just added a new parameter to our view, we need to pass it to the Preview"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-swift",metastring:"title='/UI/HabitDetailView.swift'",children:'        return HabitDetailView(habit: Habit(name: "Exercise", desc: "Good for you!"),\n                               habits: realm.objects(Habits.self).first!,\n                               isAddingNewHabit: .constant(true))\n'})}),"\n",(0,n.jsxs)(i.p,{children:["We can change ",(0,n.jsx)(i.code,{children:"isAddingNewHabit"})," in the preview to false and see how our screen looks while editing"]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{src:t(3925).Z+"",width:"614",height:"1117"})})]})}function h(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},3925:(e,i,t)=>{t.d(i,{Z:()=>n});const n=t.p+"assets/images/new-habit-d170333371e6408f5da5bbf00067d0a9.png"},1151:(e,i,t)=>{t.d(i,{Z:()=>r,a:()=>s});var n=t(7294);const a={},d=n.createContext(a);function s(e){const i=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(d.Provider,{value:i},e.children)}}}]);