"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[4235],{4137:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},y="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},w=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),y=d(a),w=r,u=y["".concat(s,".").concat(w)]||y[w]||p[w]||i;return a?n.createElement(u,o(o({ref:t},c),{},{components:a})):n.createElement(u,o({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=w;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[y]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}w.displayName="MDXCreateElement"},8950:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=a(7462),r=(a(7294),a(4137));const i={},o="Days View",l={unversionedId:"today-view/days-view",id:"today-view/days-view",title:"Days View",description:"Renaming TodayView",source:"@site/docs/10-today-view/2-days-view.mdx",sourceDirName:"10-today-view",slug:"/today-view/days-view",permalink:"/swiftui-realm-app-workshop/docs/today-view/days-view",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-realm-app-workshop/blob/main/docs/10-today-view/2-days-view.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Day Models",permalink:"/swiftui-realm-app-workshop/docs/today-view/day-models"},next:{title:"DayCellView",permalink:"/swiftui-realm-app-workshop/docs/today-view/day-cell"}},s={},d=[{value:"Renaming TodayView",id:"renaming-todayview",level:2},{value:"Creating our Days view",id:"creating-our-days-view",level:2},{value:"Showing all days",id:"showing-all-days",level:2}],c={toc:d},y="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(y,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"days-view"},"Days View"),(0,r.kt)("h2",{id:"renaming-todayview"},"Renaming TodayView"),(0,r.kt)("p",null,"As we'll showing not only today, but all our days we'll call this ",(0,r.kt)("inlineCode",{parentName:"p"},"DaysView")),(0,r.kt)("h2",{id:"creating-our-days-view"},"Creating our Days view"),(0,r.kt)("p",null,"Our DaysView will show all the days where we've been tracking our habits. For each day, a new row will be added."),(0,r.kt)("p",null,"We'll start with a quite simple SwiftUI view with just an empty ",(0,r.kt)("inlineCode",{parentName:"p"},"NavigationStack"),". We query all ",(0,r.kt)("inlineCode",{parentName:"p"},"Day")," instances in our Database to show them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/UI/DaysView.swift'",title:"'/UI/DaysView.swift'"},"import SwiftUI\nimport RealmSwift\n\n// This shows all days, we can click on a day to navigate and check habits or add\n// a new day\nstruct DaysView: View {\n    @ObservedResults(Day.self) var days\n    \n    var body: some View {\n        NavigationStack {\n        }\n    }\n}\n")),(0,r.kt)("h2",{id:"showing-all-days"},"Showing all days"),(0,r.kt)("p",null,"To show all days, we'll use a ",(0,r.kt)("inlineCode",{parentName:"p"},"ForEach")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/UI/DaysView.swift'",title:"'/UI/DaysView.swift'"},'struct DaysView: View {\n    @ObservedResults(Day.self) var days\n\n    var body: some View {\n        NavigationStack {\n            // new code here \ud83d\udc47\n            List {\n                ForEach(days) { day in\n                    Text("\\(day.date)")\n                }\n                .onDelete(perform: $days.remove)\n            }\n            .scrollContentBackground(.hidden)\n            .navigationTitle("All Days")\n            .navigationBarItems(trailing: EditButton())\n            // new code here \ud83d\udc46\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);