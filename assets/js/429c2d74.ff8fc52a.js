"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[9941],{4137:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(a),y=r,m=p["".concat(s,".").concat(y)]||p[y]||u[y]||i;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},8154:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(7462),r=(a(7294),a(4137));const i={},l="Day Models",o={unversionedId:"today-view/day-models",id:"today-view/day-models",title:"Day Models",description:'Create a new Model Classes "Day"',source:"@site/docs/10-today-view/1-day-models.mdx",sourceDirName:"10-today-view",slug:"/today-view/day-models",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/today-view/day-models",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/10-today-view/1-day-models.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Days View",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/category/days-view"},next:{title:"Days View",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/today-view/days-view"}},s={},d=[{value:"Create a new Model Classes &quot;Day&quot;",id:"create-a-new-model-classes-day",level:2},{value:"Update Habit",id:"update-habit",level:2},{value:"Create a new Model Class &quot;Days&quot;",id:"create-a-new-model-class-days",level:2}],c={toc:d},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"day-models"},"Day Models"),(0,r.kt)("h2",{id:"create-a-new-model-classes-day"},'Create a new Model Classes "Day"'),(0,r.kt)("p",null,"A Day is the record of habits for that day. We'll add a helper function to create one Day adding all Habits already added to the Realm."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Model/Day.swift'",title:"'/Model/Day.swift'"},"import Foundation\nimport RealmSwift\n\npublic class Day: Object, ObjectKeyIdentifiable {\n    @Persisted(primaryKey: true) var _id: ObjectId\n\n    @Persisted var date = Date()\n    @Persisted var habits = RealmSwift.List<Habit>()\n    \n    static func createDayWithHabitsInRealm(realm: Realm) -> Day {\n        let day = Day()\n        \n        let allHabits = realm.objects(Habits.self)\n        if let firstHabitCollection = allHabits.first {\n            let habits = firstHabitCollection.habits\n            \n            if !habits.isEmpty {\n                for habit in habits {\n                    day.habits.append(Habit.from(habit))\n                }\n            }\n        }\n\n        return day\n    }\n}\n")),(0,r.kt)("h2",{id:"update-habit"},"Update Habit"),(0,r.kt)("p",null,"We're using here a static method ",(0,r.kt)("inlineCode",{parentName:"p"},"Habit.from")," that we need to add to our ",(0,r.kt)("inlineCode",{parentName:"p"},"Habit")," model:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Model/Habit.swift'",title:"'/Model/Habit.swift'"},"static func from(_ habit: Habit) -> Habit {\n    return Habit(name: habit.name, desc: habit.desc)\n}\n")),(0,r.kt)("h2",{id:"create-a-new-model-class-days"},'Create a new Model Class "Days"'),(0,r.kt)("p",null,"This will contain a list of all the days we've been tracking our habits."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Model/Days.swift'",title:"'/Model/Days.swift'"},"import Foundation\nimport RealmSwift\n\nclass Days: Object, ObjectKeyIdentifiable {\n    @Persisted(primaryKey: true) var _id: ObjectId\n\n    @Persisted var days = RealmSwift.List<Day>()\n}\n")))}u.isMDXComponent=!0}}]);