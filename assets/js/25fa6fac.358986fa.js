"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[6180],{4137:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(a),b=i,m=u["".concat(s,".").concat(b)]||u[b]||d[b]||n;return a?r.createElement(m,c(c({ref:t},p),{},{components:a})):r.createElement(m,c({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,c=new Array(n);c[0]=b;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,c[1]=o;for(var l=2;l<n;l++)c[l]=a[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,a)}b.displayName="MDXCreateElement"},902:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>n,metadata:()=>o,toc:()=>l});var r=a(7462),i=(a(7294),a(4137));const n={},c="Tracking Habits",o={unversionedId:"tracking-habits/tracking-habits",id:"tracking-habits/tracking-habits",title:"Tracking Habits",description:"Create a new TrackDailyHabitsView",source:"@site/docs/11-tracking-habits/1-tracking-habits.mdx",sourceDirName:"11-tracking-habits",slug:"/tracking-habits/tracking-habits",permalink:"/swiftui-realm-app-workshop/docs/tracking-habits/tracking-habits",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-realm-app-workshop/blob/main/docs/11-tracking-habits/1-tracking-habits.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tracking Habits",permalink:"/swiftui-realm-app-workshop/docs/category/tracking-habits"},next:{title:"Using TrackDailyHabitsView in DaysView",permalink:"/swiftui-realm-app-workshop/docs/tracking-habits/using-it"}},s={},l=[{value:"Create a new TrackDailyHabitsView",id:"create-a-new-trackdailyhabitsview",level:2},{value:"Adjust the Preview",id:"adjust-the-preview",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tracking-habits"},"Tracking Habits"),(0,i.kt)("h2",{id:"create-a-new-trackdailyhabitsview"},"Create a new TrackDailyHabitsView"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/UI/TrackDailyHabitsView.swift'",title:"'/UI/TrackDailyHabitsView.swift'"},'import SwiftUI\nimport RealmSwift\n\nstruct TrackDailyHabitsView: View {\n    @ObservedRealmObject var day: Day\n    \n    var body: some View {\n        List {\n            Section {\n                DatePicker(\n                        "Review Date",\n                        selection: $day.date,\n                        displayedComponents: [.date]\n                    )\n                .datePickerStyle(.compact)\n            }\n            Section {\n                ForEach($day.habits) { habit in\n                    HStack {\n                        VStack(alignment: .leading) {\n                            Text(habit.name.wrappedValue)\n                            Text(habit.desc.wrappedValue)\n                        }\n                        Toggle("", isOn: habit.done)\n                    }\n                }\n            }\n        }\n        .scrollContentBackground(.hidden)\n        .navigationTitle("\\(day.date.formatted(date: .numeric, time: .omitted))")\n    }\n}\n')),(0,i.kt)("h2",{id:"adjust-the-preview"},"Adjust the Preview"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/UI/TrackDailyHabitsView.swift'",title:"'/UI/TrackDailyHabitsView.swift'"},"struct TrackDailyHabitsView_Previews: PreviewProvider {\n    static var previews: some View {\n        let day = Day.createDayWithHabitsInRealm(realm: realmWithData())\n        \n        NavigationStack {\n            TrackDailyHabitsView(day: day)\n        }\n    }\n}\n")))}d.isMDXComponent=!0}}]);