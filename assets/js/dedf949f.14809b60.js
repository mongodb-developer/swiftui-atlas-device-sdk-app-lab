"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[2894],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>w});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=m(n),u=i,w=d["".concat(s,".").concat(u)]||d[u]||c[u]||a;return n?r.createElement(w,o(o({ref:t},p),{},{components:n})):r.createElement(w,o({ref:t},p))}));function w(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var m=2;m<a;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6276:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var r=n(7462),i=(n(7294),n(4137));const a={},o="Realm+Previews extension",l={unversionedId:"realm-previews-extension/realm-previews-extension",id:"realm-previews-extension/realm-previews-extension",title:"Realm+Previews extension",description:"We're going to add to our previews some Realm-powered code. Create a Realm+Previews.swift file and add an extension of PreviewProvider. PreviewProvider is a Protocol that all SwiftUI Previews implement. So if we extend that protocol, all our previews will have the extended code.",source:"@site/docs/6-realm-previews-extension/1-realm-previews-extension.mdx",sourceDirName:"6-realm-previews-extension",slug:"/realm-previews-extension/realm-previews-extension",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/realm-previews-extension/realm-previews-extension",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/6-realm-previews-extension/1-realm-previews-extension.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add Realm to our Previews",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/category/add-realm-to-our-previews"},next:{title:"Realm Environment Variables",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/realm-previews-extension/realm-environment-variables"}},s={},m=[{value:"Realms in Memory",id:"realms-in-memory",level:2},{value:"Some data",id:"some-data",level:2},{value:"Using it in our previews",id:"using-it-in-our-previews",level:2}],p={toc:m},d="wrapper";function c(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"realmpreviews-extension"},"Realm+Previews extension"),(0,i.kt)("p",null,"We're going to add to our previews some Realm-powered code. Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Realm+Previews.swift")," file and add an extension of ",(0,i.kt)("inlineCode",{parentName:"p"},"PreviewProvider"),". ",(0,i.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/swiftui/previewprovider"},(0,i.kt)("inlineCode",{parentName:"a"},"PreviewProvider"))," is a Protocol that all SwiftUI Previews implement. So if we extend that protocol, all our previews will have the extended code."),(0,i.kt)("h2",{id:"realms-in-memory"},"Realms in Memory"),(0,i.kt)("p",null,"In this extension we'll add a function that creates and return a Realm with an in memory store. This is great for testing, as changes are not persisted to disk. To create that Realm, we 1st create the realm configuration and then the Realm using that configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Util/Realm+Previews'",title:"'/Util/Realm+Previews'"},'import SwiftUI\nimport RealmSwift\n\nextension PreviewProvider {\n    static func emptyRealmInMemory() -> Realm {\n        // configuration for an in-memory Realm\n        var conf = Realm.Configuration.defaultConfiguration\n        conf.inMemoryIdentifier = "preview"\n\n        // create and return a realm\n        let realm = try! Realm(configuration: conf)\n        return realm\n    }\n}\n')),(0,i.kt)("h2",{id:"some-data"},"Some data"),(0,i.kt)("p",null,"Now we'll add some data. We run a query to get all ",(0,i.kt)("inlineCode",{parentName:"p"},"Habits")," in the Realm. If there's none, we insert 10 new ",(0,i.kt)("inlineCode",{parentName:"p"},"Habit")," objects."),(0,i.kt)("p",null,"To store data in a Realm we just create an Object, in this case a ",(0,i.kt)("inlineCode",{parentName:"p"},"Habit"),", add it to the collection and then save the collection inside a ",(0,i.kt)("inlineCode",{parentName:"p"},"write")," transaction. No need for DAOs or ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping"},"ORMs"),", we just instantiate our model objects and call ",(0,i.kt)("inlineCode",{parentName:"p"},"realm.add")," inside a ",(0,i.kt)("inlineCode",{parentName:"p"},"realm.write")," transaction."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Util/Realm+Previews'",title:"'/Util/Realm+Previews'"},'    static func realmWithData(realm: Realm = emptyRealmInMemory()) -> Realm {\n        let existingHabits = realm.objects(Habit.self)\n        \n        // if there\'s no habits (which won\'t as we\'re using an empty realm by default) we add a few\n        if existingHabits.count == 0 {\n            let habits = Habits()\n            \n            for i in 0...9 {\n                habits.habits.append(Habit(name: "Habit \\(i)", desc: "Description \\(i)"))\n            }  \n            \n            try? realm.write({\n                realm.add(habits)\n            })\n        }\n        \n        return realm\n    }\n')),(0,i.kt)("h2",{id:"using-it-in-our-previews"},"Using it in our previews"),(0,i.kt)("p",null,"To use this data we change the preview in ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigView.swift"),". We can call ",(0,i.kt)("inlineCode",{parentName:"p"},"realmWithData")," as it's a ",(0,i.kt)("inlineCode",{parentName:"p"},"static")," member of ",(0,i.kt)("inlineCode",{parentName:"p"},"PreviewProvider")," now."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/UI/ConfigView.swift'",title:"'/UI/ConfigView.swift'"},"struct ConfigView_Previews: PreviewProvider {\n    static var previews: some View {\n        let realm =  realmWithData()\n        return ConfigView(habits: realm.objects(Habits.self).first!)\n            .environment(\\.realm, realm)\n    }\n}\n")),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(3761).Z,width:"522",height:"950"})))}c.isMDXComponent=!0},3761:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/preview-some-data-8d3784a224a8d9a950546d49c66c775c.png"}}]);