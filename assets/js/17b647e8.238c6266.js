"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[5973],{4137:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>b});var a=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},w="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),w=p(i),c=n,b=w["".concat(l,".").concat(c)]||w[c]||u[c]||r;return i?a.createElement(b,s(s({ref:t},d),{},{components:i})):a.createElement(b,s({ref:t},d))}));function b(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,s=new Array(r);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[w]="string"==typeof e?e:n,s[1]=o;for(var p=2;p<r;p++)s[p]=i[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,i)}c.displayName="MDXCreateElement"},8292:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=i(7462),n=(i(7294),i(4137));const r={},s="Passing an initial List of Habits",o={unversionedId:"habit-detail-view/initial-habits-creation",id:"habit-detail-view/initial-habits-creation",title:"Passing an initial List of Habits",description:"Right now, in MainView we're passing an empty Habits variable to ConfigView. We need to create and insert one Habits in the Realm so the information we add in our HabitDetailView is persisted.",source:"@site/docs/9-habit-detail-view/4-initial-habits-creation.mdx",sourceDirName:"9-habit-detail-view",slug:"/habit-detail-view/initial-habits-creation",permalink:"/swiftui-realm-app-workshop/docs/habit-detail-view/initial-habits-creation",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-realm-app-workshop/blob/main/docs/9-habit-detail-view/4-initial-habits-creation.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Using HabitDetailView",permalink:"/swiftui-realm-app-workshop/docs/habit-detail-view/using-habit-detail-view"},next:{title:"Days View",permalink:"/swiftui-realm-app-workshop/docs/category/days-view"}},l={},p=[{value:"Adding all Habits to MainView",id:"adding-all-habits-to-mainview",level:2},{value:"ProgressView or Tab",id:"progressview-or-tab",level:2},{value:"Adding a new Habits at startup",id:"adding-a-new-habits-at-startup",level:2},{value:"Testing on Sim",id:"testing-on-sim",level:2}],d={toc:p},w="wrapper";function u(e){let{components:t,...i}=e;return(0,n.kt)(w,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"passing-an-initial-list-of-habits"},"Passing an initial List of Habits"),(0,n.kt)("p",null,"Right now, in ",(0,n.kt)("inlineCode",{parentName:"p"},"MainView")," we're passing an empty ",(0,n.kt)("inlineCode",{parentName:"p"},"Habits")," variable to ",(0,n.kt)("inlineCode",{parentName:"p"},"ConfigView"),". We need to create and insert one Habits in the Realm so the information we add in our ",(0,n.kt)("inlineCode",{parentName:"p"},"HabitDetailView")," is persisted."),(0,n.kt)("h2",{id:"adding-all-habits-to-mainview"},"Adding all Habits to MainView"),(0,n.kt)("p",null,"We'll add a query that will read all ",(0,n.kt)("inlineCode",{parentName:"p"},"Habits")," from the Database. When we start the app for the first time, there's nothing in there. We also need to ",(0,n.kt)("inlineCode",{parentName:"p"},"import RealmSwift"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Views/MainView.swift'",title:"'/Views/MainView.swift'"},"    @ObservedResults(Habits.self) var allHabitGroups\n")),(0,n.kt)("h2",{id:"progressview-or-tab"},"ProgressView or Tab"),(0,n.kt)("p",null,"If we still don't have anything in our Database, we'll present a ProgressView. If we have something, we'll show the ",(0,n.kt)("inlineCode",{parentName:"p"},"TabView"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"in ",(0,n.kt)("inlineCode",{parentName:"li"},"MainView")," we can then pass an initial list of habits")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Views/MainView.swift'",title:"'/Views/MainView.swift'"},'var body: some View {\n    // we need at least a Habits group to start adding habits\n    if let habits = allHabitGroups.first {\n        TabView {\n            TodayView()\n                .tabItem {\n                    Image(systemName: "calendar")\n                    Text("Today")\n                }\n            ConfigView(habits: habits)\n                .tabItem {\n                    Image(systemName: "wrench.and.screwdriver")\n                    Text("Config")\n                }\n        }\n    } else {\n        ProgressView()\n    }\n}\n')),(0,n.kt)("h2",{id:"adding-a-new-habits-at-startup"},"Adding a new Habits at startup"),(0,n.kt)("p",null,"To have an instance of ",(0,n.kt)("inlineCode",{parentName:"p"},"Habits"),", we'll add it when our ",(0,n.kt)("inlineCode",{parentName:"p"},"ProgressView")," if shown."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Views/MainView.swift'",title:"'/Views/MainView.swift'"},"// if no Habits group, we add one\nProgressView()\n    .onAppear {\n        $allHabitGroups.append(Habits())\n    }\n")),(0,n.kt)("h2",{id:"testing-on-sim"},"Testing on Sim"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"we can now run the app, add, delete, edit and reorder habits!"),(0,n.kt)("li",{parentName:"ul"},"we can even use SimPholders and open the DB with MongoDB Realm Studio!")))}u.isMDXComponent=!0}}]);