"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[7579],{9762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var i=t(5893),a=t(1151);const o={},s="Migrating the Realm Schema",r={id:"migrating-schema/doing-migration",title:"Migrating the Realm Schema",description:"If we want to do a simple migration, we just need to increment the version number of the schema. This way, Realm will perform an automatic migration (if possible) and we won't lose any data. So each time we alter our schema we'll need to also increment the schema's version number.",source:"@site/docs/12-migrating-schema/3-doing-migration.mdx",sourceDirName:"12-migrating-schema",slug:"/migrating-schema/doing-migration",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/migrating-schema/doing-migration",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/12-migrating-schema/3-doing-migration.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bypassing the Migration",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/migrating-schema/bypassing-migration"},next:{title:"Summary and Next Steps",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/summary"}},m={},c=[{value:"Complete listing",id:"complete-listing",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"migrating-the-realm-schema",children:"Migrating the Realm Schema"}),"\n",(0,i.jsx)(n.p,{children:"If we want to do a simple migration, we just need to increment the version number of the schema. This way, Realm will perform an automatic migration (if possible) and we won't lose any data. So each time we alter our schema we'll need to also increment the schema's version number."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:"title='GoodHabitsRealmAppApp.swift'",children:"// ...\n    init() {\n        conf.schemaVersion = 2\n    }\n// ...\n"})}),"\n",(0,i.jsx)(n.h2,{id:"complete-listing",children:"Complete listing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-swift",metastring:"title='GoodHabitsRealmAppApp.swift'",children:"import SwiftUI\nimport RealmSwift\n\n@main\nstruct GoodHabitsRealmAppApp: SwiftUI.App {\n    var config = Realm.Configuration.defaultConfiguration\n\n    init() {\n        config.schemaVersion = 2\n    }\n\n    var body: some Scene {\n        WindowGroup {\n            MainView()\n                .environment(\\.realmConfiguration, config)\n        }\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var i=t(7294);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);