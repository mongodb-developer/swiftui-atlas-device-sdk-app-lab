"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[9941],{5080:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>d,default:()=>m,frontMatter:()=>n,metadata:()=>l,toc:()=>o});var i=t(5893),s=t(1151);const n={},d="Day Models",l={id:"today-view/day-models",title:"Day Models",description:'Create a new Model Classes "Day"',source:"@site/docs/10-today-view/1-day-models.mdx",sourceDirName:"10-today-view",slug:"/today-view/day-models",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/today-view/day-models",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/10-today-view/1-day-models.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Days View",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/category/days-view"},next:{title:"Days View",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/today-view/days-view"}},r={},o=[{value:"Create a new Model Classes &quot;Day&quot;",id:"create-a-new-model-classes-day",level:2},{value:"Update Habit",id:"update-habit",level:2},{value:"Create a new Model Class &quot;Days&quot;",id:"create-a-new-model-class-days",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h1,{id:"day-models",children:"Day Models"}),"\n",(0,i.jsx)(a.h2,{id:"create-a-new-model-classes-day",children:'Create a new Model Classes "Day"'}),"\n",(0,i.jsx)(a.p,{children:"A Day is the record of habits for that day. We'll add a helper function to create one Day adding all Habits already added to the Realm."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-swift",metastring:"title='/Model/Day.swift'",children:"import Foundation\nimport RealmSwift\n\npublic class Day: Object, ObjectKeyIdentifiable {\n    @Persisted(primaryKey: true) var _id: ObjectId\n\n    @Persisted var date = Date()\n    @Persisted var habits = RealmSwift.List<Habit>()\n    \n    static func createDayWithHabitsInRealm(realm: Realm) -> Day {\n        let day = Day()\n        \n        let allHabits = realm.objects(Habits.self)\n        if let firstHabitCollection = allHabits.first {\n            let habits = firstHabitCollection.habits\n            \n            if !habits.isEmpty {\n                for habit in habits {\n                    day.habits.append(Habit.from(habit))\n                }\n            }\n        }\n\n        return day\n    }\n}\n"})}),"\n",(0,i.jsx)(a.h2,{id:"update-habit",children:"Update Habit"}),"\n",(0,i.jsxs)(a.p,{children:["We're using here a static method ",(0,i.jsx)(a.code,{children:"Habit.from"})," that we need to add to our ",(0,i.jsx)(a.code,{children:"Habit"})," model:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-swift",metastring:"title='/Model/Habit.swift'",children:"static func from(_ habit: Habit) -> Habit {\n    return Habit(name: habit.name, desc: habit.desc)\n}\n"})}),"\n",(0,i.jsx)(a.h2,{id:"create-a-new-model-class-days",children:'Create a new Model Class "Days"'}),"\n",(0,i.jsx)(a.p,{children:"This will contain a list of all the days we've been tracking our habits."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-swift",metastring:"title='/Model/Days.swift'",children:"import Foundation\nimport RealmSwift\n\nclass Days: Object, ObjectKeyIdentifiable {\n    @Persisted(primaryKey: true) var _id: ObjectId\n\n    @Persisted var days = RealmSwift.List<Day>()\n}\n"})})]})}function m(e={}){const{wrapper:a}={...(0,s.a)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,a,t)=>{t.d(a,{Z:()=>l,a:()=>d});var i=t(7294);const s={},n=i.createContext(s);function d(e){const a=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(n.Provider,{value:a},e.children)}}}]);