"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[6180],{4831:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>b,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=a(5893),n=a(1151);const s={},r="Tracking Habits",c={id:"tracking-habits/tracking-habits",title:"Tracking Habits",description:"Create a new TrackDailyHabitsView",source:"@site/docs/11-tracking-habits/1-tracking-habits.mdx",sourceDirName:"11-tracking-habits",slug:"/tracking-habits/tracking-habits",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/tracking-habits/tracking-habits",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/11-tracking-habits/1-tracking-habits.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tracking Habits",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/category/tracking-habits"},next:{title:"Using TrackDailyHabitsView in DaysView",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/tracking-habits/using-it"}},d={},l=[{value:"Create a new TrackDailyHabitsView",id:"create-a-new-trackdailyhabitsview",level:2},{value:"Adjust the Preview",id:"adjust-the-preview",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"tracking-habits",children:"Tracking Habits"}),"\n",(0,i.jsx)(t.h2,{id:"create-a-new-trackdailyhabitsview",children:"Create a new TrackDailyHabitsView"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",metastring:"title='/UI/TrackDailyHabitsView.swift'",children:'import SwiftUI\nimport RealmSwift\n\nstruct TrackDailyHabitsView: View {\n    @ObservedRealmObject var day: Day\n    \n    var body: some View {\n        List {\n            Section {\n                DatePicker(\n                        "Review Date",\n                        selection: $day.date,\n                        displayedComponents: [.date]\n                    )\n                .datePickerStyle(.compact)\n            }\n            Section {\n                ForEach($day.habits) { habit in\n                    HStack {\n                        VStack(alignment: .leading) {\n                            Text(habit.name.wrappedValue)\n                            Text(habit.desc.wrappedValue)\n                        }\n                        Toggle("", isOn: habit.done)\n                    }\n                }\n            }\n        }\n        .scrollContentBackground(.hidden)\n        .navigationTitle("\\(day.date.formatted(date: .numeric, time: .omitted))")\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"adjust-the-preview",children:"Adjust the Preview"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-swift",metastring:"title='/UI/TrackDailyHabitsView.swift'",children:"struct TrackDailyHabitsView_Previews: PreviewProvider {\n    static var previews: some View {\n        let day = Day.createDayWithHabitsInRealm(realm: realmWithData())\n        \n        NavigationStack {\n            TrackDailyHabitsView(day: day)\n        }\n    }\n}\n"})})]})}function b(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>c,a:()=>r});var i=a(7294);const n={},s=i.createContext(n);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);