"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[696],{4137:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>b});var a=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var o=a.createContext({}),p=function(e){var t=a.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},w=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(i),w=n,b=c["".concat(o,".").concat(w)]||c[w]||f[w]||r;return i?a.createElement(b,l(l({ref:t},d),{},{components:i})):a.createElement(b,l({ref:t},d))}));function b(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,l=new Array(r);l[0]=w;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:n,l[1]=s;for(var p=2;p<r;p++)l[p]=i[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,i)}w.displayName="MDXCreateElement"},8867:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>f,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=i(7462),n=(i(7294),i(4137));const r={sidebar_position:5},l="Display a List of Habits!",s={unversionedId:"add-list-habits-view",id:"add-list-habits-view",title:"Display a List of Habits!",description:"Observing a list of all Habits",source:"@site/docs/5-add-list-habits-view.mdx",sourceDirName:".",slug:"/add-list-habits-view",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/add-list-habits-view",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/5-add-list-habits-view.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Habits model class",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/create-models/habits"},next:{title:"Add Realm to our Previews",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/category/add-realm-to-our-previews"}},o={},p=[{value:"Observing a list of all Habits",id:"observing-a-list-of-all-habits",level:2},{value:"Update Preview code",id:"update-preview-code",level:2},{value:"Update <code>MainView</code>",id:"update-mainview",level:2},{value:"Add a SwiftUI List to <code>ConfigView</code>",id:"add-a-swiftui-list-to-configview",level:2},{value:"Identifiable",id:"identifiable",level:2},{value:"The Preview",id:"the-preview",level:2}],d={toc:p},c="wrapper";function f(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"display-a-list-of-habits"},"Display a List of Habits!"),(0,n.kt)("h2",{id:"observing-a-list-of-all-habits"},"Observing a list of all Habits"),(0,n.kt)("p",null,"To display the list of habits we'll be creating in ",(0,n.kt)("inlineCode",{parentName:"p"},"ConfigView"),", we'll start by adding to ",(0,n.kt)("inlineCode",{parentName:"p"},"ConfigView")," all the ",(0,n.kt)("inlineCode",{parentName:"p"},"Habits")," from the local DB"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='UI/ConfigView.swift'",title:"'UI/ConfigView.swift'"},"@ObservedRealmObject var habits: Habits\n")),(0,n.kt)("p",null,"This works as a query, reading all objects of type ",(0,n.kt)("inlineCode",{parentName:"p"},"Habit")," from our local DB. As this is ",(0,n.kt)("inlineCode",{parentName:"p"},"Observed"),", any changes will be reflected automatically in the View."),(0,n.kt)("h2",{id:"update-preview-code"},"Update Preview code"),(0,n.kt)("p",null,"We need to add the parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"habits")," when we instantiate a new ",(0,n.kt)("inlineCode",{parentName:"p"},"ConfigView")," in the Preview."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='UI/ConfigView.swift'",title:"'UI/ConfigView.swift'"},"struct ConfigView_Previews: PreviewProvider {\n    static var previews: some View {\n        ConfigView(habits: Habits())\n    }\n}\n")),(0,n.kt)("h2",{id:"update-mainview"},"Update ",(0,n.kt)("inlineCode",{parentName:"h2"},"MainView")),(0,n.kt)("p",null,"As we also use ",(0,n.kt)("inlineCode",{parentName:"p"},"ConfigView")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"MainView")," we need to update the code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='UI/MainView.swift'",title:"'UI/MainView.swift'"},'            ConfigView(habits: Habits())\n                .tabItem {\n                    Image(systemName: "wrench.and.screwdriver")\n                    Text("Config")\n                }\n')),(0,n.kt)("h2",{id:"add-a-swiftui-list-to-configview"},"Add a SwiftUI List to ",(0,n.kt)("inlineCode",{parentName:"h2"},"ConfigView")),(0,n.kt)("p",null,"We'll replace the contents of ",(0,n.kt)("inlineCode",{parentName:"p"},"ConfigView")," and add a list that show's each ",(0,n.kt)("inlineCode",{parentName:"p"},"Habit"),"'s name."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='UI/ConfigView.swift'",title:"'UI/ConfigView.swift'"},'struct ConfigView: View {    \n    var body: some View {\n        List {\n            ForEach(habits.habits) { habit in\n                Text("\\(habit.name)")\n            }\n        }\n    }\n}\n')),(0,n.kt)("h2",{id:"identifiable"},"Identifiable"),(0,n.kt)("p",null,"If we compile, we'll get this error:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Referencing initializer 'init(_:content:)' on 'ForEach' requires that 'Habit' conform to 'Identifiable'\n")),(0,n.kt)("p",null,"We need that ",(0,n.kt)("inlineCode",{parentName:"p"},"Habits"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Habit")," conform to ",(0,n.kt)("inlineCode",{parentName:"p"},"RealmSwift.ObjectKeyIdentifiable"),", so we can use them easily with ",(0,n.kt)("inlineCode",{parentName:"p"},"ForEach")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Model/Habit.swift'",title:"'/Model/Habit.swift'"},"class Habit: Object, ObjectKeyIdentifiable {\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/Model/Habits.swift'",title:"'/Model/Habits.swift'"},"class Habits: Object, ObjectKeyIdentifiable {\n")),(0,n.kt)("h2",{id:"the-preview"},"The Preview"),(0,n.kt)("p",null,"Is empty! That's because we're passing an empty ",(0,n.kt)("inlineCode",{parentName:"p"},"Habits()")," object that has no ",(0,n.kt)("inlineCode",{parentName:"p"},"Habit")," inside. Let's fix this adding some data to our Realm."),(0,n.kt)("p",null,(0,n.kt)("img",{src:i(8215).Z,width:"542",height:"961"})))}f.isMDXComponent=!0},8215:(e,t,i)=>{i.d(t,{Z:()=>a});const a=i.p+"assets/images/empty-preview-252c6c1dcba3085225df15f79ae42ff1.png"}}]);