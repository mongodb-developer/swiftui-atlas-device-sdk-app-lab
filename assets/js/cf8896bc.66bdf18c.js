"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[3608],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),m=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",v={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=m(t),u=a,f=c["".concat(s,".").concat(u)]||c[u]||v[u]||i;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var m=2;m<i;m++)l[m]=t[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7252:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>v,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=t(7462),a=(t(7294),t(4137));const i={},l="Realm Environment Variables",o={unversionedId:"realm-previews-extension/realm-environment-variables",id:"realm-previews-extension/realm-environment-variables",title:"Realm Environment Variables",description:"Environment .realm",source:"@site/docs/6-realm-previews-extension/2-realm-environment-variables.mdx",sourceDirName:"6-realm-previews-extension",slug:"/realm-previews-extension/realm-environment-variables",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/realm-previews-extension/realm-environment-variables",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/6-realm-previews-extension/2-realm-environment-variables.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Realm+Previews extension",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/realm-previews-extension/realm-previews-extension"},next:{title:"Improve the Habit Cell",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/category/improve-the-habit-cell"}},s={},m=[{value:"Environment .realm",id:"environment-realm",level:2},{value:"Environment .realmConfig",id:"environment-realmconfig",level:2}],p={toc:m},c="wrapper";function v(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"realm-environment-variables"},"Realm Environment Variables"),(0,a.kt)("h2",{id:"environment-realm"},"Environment .realm"),(0,a.kt)("p",null,"Atlas Device SDK defines several ",(0,a.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/swiftui/environment"},"environment")," variables in SwiftUI, we've already used one in this preview:"),(0,a.kt)("p",null,"To use this data we change the preview in ",(0,a.kt)("inlineCode",{parentName:"p"},"ConfigView.swift"),". We can call ",(0,a.kt)("inlineCode",{parentName:"p"},"realmWithData")," as it's a ",(0,a.kt)("inlineCode",{parentName:"p"},"static")," member of ",(0,a.kt)("inlineCode",{parentName:"p"},"PreviewProvider")," now."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='ConfigView.swift'",title:"'ConfigView.swift'"},"struct ConfigView_Previews: PreviewProvider {\n    static var previews: some View {\n        let realm =  realmWithData()\n        return ConfigView(habits: realm.objects(Habits.self).first!)\n            .environment(\\.realm, realm)\n    }\n}\n")),(0,a.kt)("p",null,"The default Realm is created by the Atlas Device SDK and we can access it using the path ",(0,a.kt)("inlineCode",{parentName:"p"},"\\.realm"),", but we can inject a new realm to other views down our hierarchy using:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},".environment(\\.realm, realm)\n")),(0,a.kt)("h2",{id:"environment-realmconfig"},"Environment .realmConfig"),(0,a.kt)("p",null,"We can also change the default Realm Config and inject it using the environment with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},".environment(\\.realmConfig, realmConfig)\n")))}v.isMDXComponent=!0}}]);