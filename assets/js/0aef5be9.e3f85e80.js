"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[5364],{793:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var n=t(5893),a=t(1151);const s={},o="Bypassing the Migration",r={id:"migrating-schema/bypassing-migration",title:"Bypassing the Migration",description:"Simplest way to bypass the Migration",source:"@site/docs/12-migrating-schema/2-bypassing-migration.mdx",sourceDirName:"12-migrating-schema",slug:"/migrating-schema/bypassing-migration",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/migrating-schema/bypassing-migration",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/12-migrating-schema/2-bypassing-migration.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Changing the Schema",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/migrating-schema/changing-schema"},next:{title:"Migrating the Realm Schema",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/migrating-schema/doing-migration"}},l={},d=[{value:"Simplest way to bypass the Migration",id:"simplest-way-to-bypass-the-migration",level:2},{value:"Add the RealmSwift import",id:"add-the-realmswift-import",level:2},{value:"Get default config and set <code>deleteRealmIfMigrationNeeded</code>",id:"get-default-config-and-set-deleterealmifmigrationneeded",level:2},{value:"Complete listing",id:"complete-listing",level:2}];function p(e){const i={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"bypassing-the-migration",children:"Bypassing the Migration"}),"\n",(0,n.jsx)(i.h2,{id:"simplest-way-to-bypass-the-migration",children:"Simplest way to bypass the Migration"}),"\n",(0,n.jsxs)(i.p,{children:["We can drop the database each time we make a change in the schema using ",(0,n.jsx)(i.code,{children:"deleteRealmIfMigrationNeeded"}),". This is a quick way to bypass the migration while in development but we should ",(0,n.jsx)(i.strong,{children:"never ship an app using this"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"add-the-realmswift-import",children:"Add the RealmSwift import"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-swift",metastring:"title='GoodHabitsRealmAppApp.swift' ",children:"import RealmSwift\n"})}),"\n",(0,n.jsxs)(i.p,{children:["This will create a problem, as both SwiftUI and RealmSwift have an ",(0,n.jsx)(i.code,{children:"App"})," type. To fix this, we'll add ",(0,n.jsx)(i.code,{children:"SwiftUI"})," to our app like:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-swift",metastring:"title='GoodHabitsRealmAppApp.swift' ",children:"struct GoodHabitsRealmAppApp: SwiftUI.App {\n"})}),"\n",(0,n.jsxs)(i.h2,{id:"get-default-config-and-set-deleterealmifmigrationneeded",children:["Get default config and set ",(0,n.jsx)(i.code,{children:"deleteRealmIfMigrationNeeded"})]}),"\n",(0,n.jsxs)(i.p,{children:["Here we just change the config for ",(0,n.jsx)(i.code,{children:"DEBUG"})," builds. This way we avoid shipping this code."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-swift",metastring:"title='GoodHabitsRealmAppApp.swift'",children:"// ...\nstruct GoodHabitsRealmAppApp: SwiftUI.App {\n    var config = Realm.Configuration.defaultConfiguration\n\n    init() {\n        #if DEBUG\n        config.deleteRealmIfMigrationNeeded = true\n        #endif\n    }\n\n    // ...\n}\n"})}),"\n",(0,n.jsx)(i.h2,{id:"complete-listing",children:"Complete listing"}),"\n",(0,n.jsxs)(i.p,{children:["Our new ",(0,n.jsx)(i.code,{children:"GoodHabitsRealmAppApp"})," look like this. Now we can change our schema without getting errors, but we'll lose any changes in the database."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-swift",metastring:"title='GoodHabitsRealmAppApp.swift'",children:"import SwiftUI\nimport RealmSwift\n\n@main\nstruct GoodHabitsRealmAppApp: SwiftUI.App {\n    var config = Realm.Configuration.defaultConfiguration\n\n    init() {\n        #if DEBUG\n        config.deleteRealmIfMigrationNeeded = true\n        #endif\n    }\n\n    var body: some Scene {\n        WindowGroup {\n            MainView()\n                .environment(\\.realmConfiguration, config)\n        }\n    }\n}\n"})})]})}function c(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},1151:(e,i,t)=>{t.d(i,{Z:()=>r,a:()=>o});var n=t(7294);const a={},s=n.createContext(a);function o(e){const i=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:i},e.children)}}}]);