"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[696],{9075:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var s=t(5893),a=t(1151);const n={sidebar_position:5},d="Display a List of Habits!",l={id:"add-list-habits-view",title:"Display a List of Habits!",description:"Observing a list of all Habits",source:"@site/docs/5-add-list-habits-view.mdx",sourceDirName:".",slug:"/add-list-habits-view",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/add-list-habits-view",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/5-add-list-habits-view.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Habits model class",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/create-models/habits"},next:{title:"Add Realm to our Previews",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/category/add-realm-to-our-previews"}},r={},c=[{value:"Observing a list of all Habits",id:"observing-a-list-of-all-habits",level:2},{value:"Update Preview code",id:"update-preview-code",level:2},{value:"Update <code>MainView</code>",id:"update-mainview",level:2},{value:"Add a SwiftUI List to <code>ConfigView</code>",id:"add-a-swiftui-list-to-configview",level:2},{value:"Identifiable",id:"identifiable",level:2},{value:"The Preview",id:"the-preview",level:2}];function o(e){const i={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"display-a-list-of-habits",children:"Display a List of Habits!"}),"\n",(0,s.jsx)(i.h2,{id:"observing-a-list-of-all-habits",children:"Observing a list of all Habits"}),"\n",(0,s.jsxs)(i.p,{children:["To display the list of habits we'll be creating in ",(0,s.jsx)(i.code,{children:"ConfigView"}),", we'll start by adding to ",(0,s.jsx)(i.code,{children:"ConfigView"})," all the ",(0,s.jsx)(i.code,{children:"Habits"})," from the local DB"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-swift",metastring:"title='UI/ConfigView.swift'",children:"@ObservedRealmObject var habits: Habits\n"})}),"\n",(0,s.jsxs)(i.p,{children:["This works as a query, reading all objects of type ",(0,s.jsx)(i.code,{children:"Habit"})," from our local DB. As this is ",(0,s.jsx)(i.code,{children:"Observed"}),", any changes will be reflected automatically in the View."]}),"\n",(0,s.jsx)(i.h2,{id:"update-preview-code",children:"Update Preview code"}),"\n",(0,s.jsxs)(i.p,{children:["We need to add the parameter ",(0,s.jsx)(i.code,{children:"habits"})," when we instantiate a new ",(0,s.jsx)(i.code,{children:"ConfigView"})," in the Preview."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-swift",metastring:"title='UI/ConfigView.swift'",children:"struct ConfigView_Previews: PreviewProvider {\n    static var previews: some View {\n        ConfigView(habits: Habits())\n    }\n}\n"})}),"\n",(0,s.jsxs)(i.h2,{id:"update-mainview",children:["Update ",(0,s.jsx)(i.code,{children:"MainView"})]}),"\n",(0,s.jsxs)(i.p,{children:["As we also use ",(0,s.jsx)(i.code,{children:"ConfigView"})," in ",(0,s.jsx)(i.code,{children:"MainView"})," we need to update the code"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-swift",metastring:"title='UI/MainView.swift'",children:'            ConfigView(habits: Habits())\n                .tabItem {\n                    Image(systemName: "wrench.and.screwdriver")\n                    Text("Config")\n                }\n'})}),"\n",(0,s.jsxs)(i.h2,{id:"add-a-swiftui-list-to-configview",children:["Add a SwiftUI List to ",(0,s.jsx)(i.code,{children:"ConfigView"})]}),"\n",(0,s.jsxs)(i.p,{children:["We'll replace the contents of ",(0,s.jsx)(i.code,{children:"ConfigView"})," and add a list that show's each ",(0,s.jsx)(i.code,{children:"Habit"}),"'s name."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-swift",metastring:"title='UI/ConfigView.swift'",children:'struct ConfigView: View {    \n    var body: some View {\n        List {\n            ForEach(habits.habits) { habit in\n                Text("\\(habit.name)")\n            }\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(i.h2,{id:"identifiable",children:"Identifiable"}),"\n",(0,s.jsx)(i.p,{children:"If we compile, we'll get this error:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{children:"Referencing initializer 'init(_:content:)' on 'ForEach' requires that 'Habit' conform to 'Identifiable'\n"})}),"\n",(0,s.jsxs)(i.p,{children:["We need that ",(0,s.jsx)(i.code,{children:"Habits"}),", ",(0,s.jsx)(i.code,{children:"Habit"})," conform to ",(0,s.jsx)(i.code,{children:"RealmSwift.ObjectKeyIdentifiable"}),", so we can use them easily with ",(0,s.jsx)(i.code,{children:"ForEach"})]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-swift",metastring:"title='/Model/Habit.swift'",children:"class Habit: Object, ObjectKeyIdentifiable {\n"})}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-swift",metastring:"title='/Model/Habits.swift'",children:"class Habits: Object, ObjectKeyIdentifiable {\n"})}),"\n",(0,s.jsx)(i.h2,{id:"the-preview",children:"The Preview"}),"\n",(0,s.jsxs)(i.p,{children:["Is empty! That's because we're passing an empty ",(0,s.jsx)(i.code,{children:"Habits()"})," object that has no ",(0,s.jsx)(i.code,{children:"Habit"})," inside. Let's fix this adding some data to our Realm."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{src:t(8215).Z+"",width:"542",height:"961"})})]})}function h(e={}){const{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8215:(e,i,t)=>{t.d(i,{Z:()=>s});const s=t.p+"assets/images/empty-preview-252c6c1dcba3085225df15f79ae42ff1.png"},1151:(e,i,t)=>{t.d(i,{Z:()=>l,a:()=>d});var s=t(7294);const a={},n=s.createContext(a);function d(e){const i=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),s.createElement(n.Provider,{value:i},e.children)}}}]);