"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[8962],{4137:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>u});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function d(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var o=n.createContext({}),s=function(e){var t=n.useContext(o),i=t;return e&&(i="function"==typeof e?e(t):d(d({},t),e)),i},p=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},b="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},w=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(i),w=a,u=b["".concat(o,".").concat(w)]||b[w]||c[w]||r;return i?n.createElement(u,d(d({ref:t},p),{},{components:i})):n.createElement(u,d({ref:t},p))}));function u(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,d=new Array(r);d[0]=w;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[b]="string"==typeof e?e:a,d[1]=l;for(var s=2;s<r;s++)d[s]=i[s];return n.createElement.apply(null,d)}return n.createElement.apply(null,i)}w.displayName="MDXCreateElement"},340:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=i(7462),a=(i(7294),i(4137));const r={},d="Adding and Editing Habits",l={unversionedId:"habit-detail-view/habit-detail-view-edit",id:"habit-detail-view/habit-detail-view-edit",title:"Adding and Editing Habits",description:"Adding or Editing?",source:"@site/docs/9-habit-detail-view/2-habit-detail-view-edit.mdx",sourceDirName:"9-habit-detail-view",slug:"/habit-detail-view/habit-detail-view-edit",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/habit-detail-view/habit-detail-view-edit",draft:!1,editUrl:"https://github.com/mongodb-developer/swiftui-atlas-device-sdk-app-lab/blob/main/docs/9-habit-detail-view/2-habit-detail-view-edit.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create the HabitDetailView",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/habit-detail-view/habit-detail-view"},next:{title:"Using HabitDetailView",permalink:"/swiftui-atlas-device-sdk-app-lab/docs/habit-detail-view/using-habit-detail-view"}},o={},s=[{value:"Adding or Editing?",id:"adding-or-editing",level:2},{value:"Fixing the Preview (again)",id:"fixing-the-preview-again",level:2}],p={toc:s},b="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(b,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"adding-and-editing-habits"},"Adding and Editing Habits"),(0,a.kt)("h2",{id:"adding-or-editing"},"Adding or Editing?"),(0,a.kt)("p",null,"We want to use this view for adding a new Habit or to edit an existing one. If we're adding, the injected ",(0,a.kt)("inlineCode",{parentName:"p"},"habit")," will be blank. If editing, it'll contain data. To distinguish between these two modes we'll use a simple boolean variable ",(0,a.kt)("inlineCode",{parentName:"p"},"isAddingNewHabit"),". "),(0,a.kt)("p",null,'If we\'re adding a new Habit, we change the title to "New Habit" and a new "Save" button will add this new Habit to the list of ',(0,a.kt)("inlineCode",{parentName:"p"},"habits")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/UI/HabitDetailView.swift'",title:"'/UI/HabitDetailView.swift'"},'struct HabitDetailView: View {\n    @ObservedRealmObject var habit: Habit\n    @ObservedRealmObject var habits: Habits\n    @Binding var isAddingNewHabit: Bool\n\n    var body: some View {\n        VStack {\n            if isAddingNewHabit {\n                Text("New Habit")\n                    .font(.largeTitle)\n            } else {\n                Text(habit.name)\n                    .font(.largeTitle)\n            }\n            \n            List {\n                Section {\n                    TextField("Name", text: $habit.name, prompt: Text("Enter habit name"))\n                    TextField("Description", text: $habit.desc, prompt: Text("Enter habit description"))\n                }\n            }\n\n            if isAddingNewHabit {\n                Button("Save") {\n                    $habits.habits.append(habit)\n                    isAddingNewHabit = false\n                }.padding()\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"We've deleted the ",(0,a.kt)("inlineCode",{parentName:"p"},'.navigationTitle("New Habit")')," as now we're using the ",(0,a.kt)("inlineCode",{parentName:"p"},"largeTitle")," ",(0,a.kt)("inlineCode",{parentName:"p"},"Text")," to show if we're editing or adding."),(0,a.kt)("h2",{id:"fixing-the-preview-again"},"Fixing the Preview (again)"),(0,a.kt)("p",null,"As we just added a new parameter to our view, we need to pass it to the Preview"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title='/UI/HabitDetailView.swift'",title:"'/UI/HabitDetailView.swift'"},'        return HabitDetailView(habit: Habit(name: "Exercise", desc: "Good for you!"),\n                               habits: realm.objects(Habits.self).first!,\n                               isAddingNewHabit: .constant(true))\n')),(0,a.kt)("p",null,"We can change ",(0,a.kt)("inlineCode",{parentName:"p"},"isAddingNewHabit")," in the preview to false and see how our screen looks while editing "),(0,a.kt)("p",null,(0,a.kt)("img",{src:i(3925).Z,width:"614",height:"1117"})))}c.isMDXComponent=!0},3925:(e,t,i)=>{i.d(t,{Z:()=>n});const n=i.p+"assets/images/new-habit-d170333371e6408f5da5bbf00067d0a9.png"}}]);